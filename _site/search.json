[
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if the relevant packages are installed in the computer. If they are, then they will be launched into R. The packages are:\n\njsonlite: Provides functions for working with JSON data.\ntidygraph: Provides tidyverse style interface for working with graph data.\nggraph: Flexible and intuitive grammar of graphics approach for visualizing graphs.\nigraph: For working and analyzing graph data.\nvisNetwork: For creating interactive network visualizations.\ntidyverse: A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nheatmaply: For creating interactive heatmaps.\n\n\npacman::p_load(jsonlite, tidygraph, ggraph, igraph, visNetwork, tidyverse, heatmaply)\n\n\n\n\n\nMC2 <- fromJSON(\"data/mc2_challenge_graph.json\")\n\n\n\n\nBefore creating the graph, the nodes need to be extracted from the data and saved into a tibble data frame object.\n\nMC2_nodes <- as_tibble(MC2$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\nThe edges are then extracted and saved into a tibble data frame object as well. The ‘year’ column is created to facilitate annual trend analysis.\n\nMC2_edges <- as_tibble(MC2$links) %>%\n  mutate(arrivaldate = ymd(arrivaldate)) %>%\n  mutate(year = year(arrivaldate)) %>%\n  select(source, target, arrivaldate, year, hscode, valueofgoods_omu, volumeteu, weightkg, valueofgoodsusd) %>%\n  distinct()\n\n\n\nAs the objective of the exercise is to investigate illegal fishing activities, the appropriate records should be filtered according to the Harmonized System (HS) codes. Using the HS Nomenclature 2022 edition by the World Customs Organization, illegal fishing activities are likely related to HS codes starting with 03 and 16.\nHowever, from the initial data exploration, no codes starting with 03 were found. Upon further investigation of the top 10 most frequent HS codes, there were a few codes that may suggest erroneous records relating with fishing, as shown in the table below.\n\n\nCode\nMC2_edges %>%\n  count(hscode, sort = TRUE) %>%\n  top_n(10)\n\n\n# A tibble: 10 × 2\n   hscode      n\n   <chr>   <int>\n 1 306170 156204\n 2 950300 123262\n 3 870899 108353\n 4 611020  90772\n 5 940360  89764\n 6 304620  87340\n 7 160414  81858\n 8 640299  66209\n 9 870323  62132\n10 640399  62128\n\n\n\n\n\n\n\n\n\nHS Codes\nBrief Description\n\n\n\n\n306170\n[Not found. Likely erroneously keyed as 030462 is for Other Shrimps and Prawns.]\n\n\n950300\nToys\n\n\n870899\nParts for Motor Vehicles\n\n\n611020\nPullovers, Cardigans\n\n\n940360\nFurniture, Wooden\n\n\n304620\n[Not found. Likely erroneously keyed as 030462 is for Catfish Fillets Frozen.]\n\n\n160414\nTunas, Skipjack and Bonito, Prepared or Preserved\n\n\n640299\nFootwear\n\n\n870323\nPassenger Motor Vehicles\n\n\n640399\nFootwear\n\n\n\nFrom the above, it seems that HS codes beginning with 30 may have been missing a header “0” which would coincide with codes related to fishing. Furthermore, the HS codes beginning with 30 could not be matched with any existing codes. Hence, for the purpose of this exercise, HS codes beginning with 30, 1603 and 1604 were filtered.\n\n\nCode\nMC2_edges_filter <- MC2_edges %>%\n  filter(str_detect(hscode, \"^30|^1603|^1604\"))\n\n\nTo facilitate initial analysis, we will aggregate all edges based on the source, targets, HS codes and year to find annual patterns at the company level. The edges will be weighted based on the count of shipment within that period. To prevent any insignificant shipments from cluttering the graph, only weights above 20 are considered.\n\nMC2_edges_aggregated_2028 <- MC2_edges_filter %>%\n  filter(year == \"2028\") %>%\n  group_by(source, target, hscode, year) %>%\n  summarise(weight = n()) %>%\n  filter(source != target) %>%\n  filter(weight > 20) %>%\n  ungroup()\n\n\n\n\nInstead of using the nodes table from the original data, a new nodes table will be prepared using the source and target fields of the aggregated edges data table above. This is to ensure that the nodes only include all source and target values of the edges.\n\nid1 <- MC2_edges_aggregated_2028 %>%\n  select(source) %>%\n  rename(id = source)\nid2 <- MC2_edges_aggregated_2028 %>%\n  select(target) %>%\n  rename(id = target)\nMC2_nodes_extracted_2028 <- rbind(id1,id2) %>%\n  distinct()\n\n\n\n\n\nThe code chunk below will then utilise the prepared edges and nodes to create a tidy graph object.\n\nMC2_graph_2028 <- tbl_graph(nodes = MC2_nodes_extracted_2028,\n                       edges = MC2_edges_aggregated_2028,\n                       directed = TRUE)\n\n\n\n\nSince we are looking for the business relationship patterns, a straightforward indicator would be the in- and out-degrees of a directed graph. The code chunk below calculates both in- and out-degrees, weighted by number of shipments and unweighted as well.\n\n\nCode\nin_degrees <- degree(MC2_graph_2028, mode = \"in\", loops = FALSE)\nout_degrees <- degree(MC2_graph_2028, mode = \"out\", loops = FALSE)\ncombined_degrees <- (in_degrees + out_degrees)\n\nwt_in_degrees <- strength(MC2_graph_2028, mode = \"in\", loops = FALSE)\nwt_out_degrees <- strength(MC2_graph_2028, mode = \"out\", loops = FALSE)\nwt_combined_degrees <- (wt_in_degrees + wt_out_degrees)\n\ndegree_table_2028 <- data.frame(node = MC2_graph_2028) %>%\n  mutate(year=2028, \n         wt_in_degree = wt_in_degrees,\n         wt_out_degree = wt_out_degrees,\n         wt_combined = wt_combined_degrees,\n         in_degree = in_degrees,\n         out_degree = out_degrees,\n         combined = combined_degrees,\n         group = case_when(\n           in_degree != 0 & out_degree != 0 ~ \"Transit\",\n           in_degree != 0 & out_degree == 0 ~ \"Importer\",\n           in_degree == 0 & out_degree != 0 ~ \"Exporter\"\n         ))\n\n\nFrom the degrees, we observe 3 different scenarios:\n\nSome companies have a high in-degree but no out-degree. These companies can be characterized as importers.\nOther companies have a high out-degree and no in-degree. These companies can be characterized as exporters.\nA minority of the companies have both an out-degree and in-degree. We characterize them as transit companies."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualization-for-annual-trends",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualization-for-annual-trends",
    "title": "Take-home_Ex02",
    "section": "Visualization for annual trends",
    "text": "Visualization for annual trends\nThe code chunk below plots the network graph for the rest of the years from 2029 to 2034. Generally, large shipping companies tend to be operating at a relatively consistent rate. This is even so for the exceptionally large pair in point c above.\n\n\nCode\ndegree_table_all <- data.frame(year=numeric(), \n                           wt_in_degree = numeric(),\n                           wt_out_degree = numeric(),\n                           wt_combined = numeric(),\n                           in_degree = numeric(),\n                           out_degree = numeric(),\n                           combined = numeric(),\n                           group = character())\nfor (y in sort(unique(MC2_edges_filter$year))) {\n  temp_edges_aggregated <- MC2_edges_filter %>%\n  filter(year == y) %>%\n  group_by(source, target, hscode, year) %>%\n  summarise(weight = n()) %>%\n  filter(source != target) %>%\n  filter(weight > 20) %>%\n  ungroup()\n  \n  id1 <- temp_edges_aggregated %>%\n    select(source) %>%\n    rename(id = source)\n  id2 <- temp_edges_aggregated %>%\n    select(target) %>%\n    rename(id = target)\n  temp_nodes_extracted <- rbind(id1,id2) %>%\n    distinct()\n  \n  temp_graph <- tbl_graph(nodes = temp_nodes_extracted,\n                       edges = temp_edges_aggregated,\n                       directed = TRUE)\n  \n  in_degrees <- degree(temp_graph, mode = \"in\", loops = FALSE)\n  out_degrees <- degree(temp_graph, mode = \"out\", loops = FALSE)\n  combined_degrees <- (in_degrees + out_degrees)\n\n  wt_in_degrees <- strength(temp_graph, mode = \"in\", loops = FALSE)\n  wt_out_degrees <- strength(temp_graph, mode = \"out\", loops = FALSE)\n  wt_combined_degrees <- (wt_in_degrees + wt_out_degrees)\n  \n  temp <- data.frame(node = temp_graph) %>%\n    mutate(year=y, \n           wt_in_degree = wt_in_degrees,\n           wt_out_degree = wt_out_degrees,\n           wt_combined = wt_combined_degrees,\n           in_degree = in_degrees,\n           out_degree = out_degrees,\n           combined = combined_degrees,\n           group = case_when(\n           in_degree != 0 & out_degree != 0 ~ \"Transit\",\n           in_degree != 0 & out_degree == 0 ~ \"Importer\",\n           in_degree == 0 & out_degree != 0 ~ \"Exporter\")\n           )\n  \n  variable_name <- paste(\"degree_table\", y, sep = \"_\")\n  assign(variable_name, temp)\n  \n  variable_name <- paste(\"MC2_graph\", y, sep = \"_\")\n  assign(variable_name, temp_graph)\n  \n  degree_table_all <- rbind(degree_table_all, temp)\n  rm(temp)\n  rm(temp_graph)\n}\n\n\n\n202920302031203220332034\n\n\n\n\nCode\nedges_df <- MC2_graph_2029 %>%\n  activate(edges) %>%\n  as.tibble()\n\nnodes_df <- MC2_graph_2029 %>%\n  activate(nodes) %>%\n  as.tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number(),\n         group = degree_table_2029$group,\n         size = pmin(pmax(degree_table_2029$wt_combined / 20, 15), 50)) %>%\n  select(id, label, group, size)\n\nvisNetwork(nodes_df,\n           edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(selectionWidth = 10, \n           arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = list(enabled = TRUE, selected = as.character(which(nodes_df$label == \"Fresh Wharf SRL Consulting\")))) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\nCode\nedges_df <- MC2_graph_2030 %>%\n  activate(edges) %>%\n  as.tibble()\n\nnodes_df <- MC2_graph_2030 %>%\n  activate(nodes) %>%\n  as.tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number(),\n         group = degree_table_2030$group,\n         size = pmin(pmax(degree_table_2030$wt_combined / 20, 15), 50)) %>%\n  select(id, label, group, size)\n\nvisNetwork(nodes_df,\n           edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(selectionWidth = 10, \n           arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = list(enabled = TRUE, selected = as.character(which(nodes_df$label == \"Fresh Wharf SRL Consulting\")))) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\nCode\nedges_df <- MC2_graph_2031 %>%\n  activate(edges) %>%\n  as.tibble()\n\nnodes_df <- MC2_graph_2031 %>%\n  activate(nodes) %>%\n  as.tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number(),\n         group = degree_table_2031$group,\n         size = pmin(pmax(degree_table_2031$wt_combined / 20, 15), 50)) %>%\n  select(id, label, group, size)\n\nvisNetwork(nodes_df,\n           edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(selectionWidth = 10, \n           arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = list(enabled = TRUE, selected = as.character(which(nodes_df$label == \"Fresh Wharf SRL Consulting\")))) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\nCode\nedges_df <- MC2_graph_2032 %>%\n  activate(edges) %>%\n  as.tibble()\n\nnodes_df <- MC2_graph_2032 %>%\n  activate(nodes) %>%\n  as.tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number(),\n         group = degree_table_2032$group,\n         size = pmin(pmax(degree_table_2032$wt_combined / 20, 15), 50)) %>%\n  select(id, label, group, size)\n\nvisNetwork(nodes_df,\n           edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(selectionWidth = 10, \n           arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = list(enabled = TRUE, selected = as.character(which(nodes_df$label == \"Fresh Wharf SRL Consulting\")))) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nCode\nedges_df <- MC2_graph_2033 %>%\n  activate(edges) %>%\n  as.tibble()\n\nnodes_df <- MC2_graph_2033 %>%\n  activate(nodes) %>%\n  as.tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number(),\n         group = degree_table_2033$group,\n         size = pmin(pmax(degree_table_2033$wt_combined / 20, 15), 50)) %>%\n  select(id, label, group, size)\n\nvisNetwork(nodes_df,\n           edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(selectionWidth = 10, \n           arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = list(enabled = TRUE, selected = as.character(which(nodes_df$label == \"Fresh Wharf SRL Consulting\")))) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nCode\nedges_df <- MC2_graph_2034 %>%\n  activate(edges) %>%\n  as.tibble()\n\nnodes_df <- MC2_graph_2034 %>%\n  activate(nodes) %>%\n  as.tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number(),\n         group = degree_table_2034$group,\n         size = pmin(pmax(degree_table_2034$wt_combined / 20, 15), 50)) %>%\n  select(id, label, group, size)\n\nvisNetwork(nodes_df,\n           edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(selectionWidth = 10, \n           arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = list(enabled = TRUE, selected = as.character(which(nodes_df$label == \"Fresh Wharf SRL Consulting\")))) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndegree_table_all %>% group_by(id, year)\n\n\n# A tibble: 4,096 × 9\n# Groups:   id, year [4,096]\n   id           year wt_in_degree wt_out_degree wt_combined in_degree out_degree\n   <chr>       <dbl>        <dbl>         <dbl>       <dbl>     <dbl>      <dbl>\n 1 1 Ltd. Lia…  2028            0            68          68         0          1\n 2 4 S.A. de …  2028            0            24          24         0          1\n 3 9 Charter …  2028            0            61          61         0          2\n 4 Adriatic C…  2028            0            30          30         0          1\n 5 Adriatic T…  2028            0            43          43         0          2\n 6 Adriatic T…  2028            0           116         116         0          1\n 7 Adriatic T…  2028          124           478         602         3          6\n 8 Amerigo Do…  2028            0            42          42         0          1\n 9 Ancla de O…  2028            0            50          50         0          1\n10 Andhra Pra…  2028            0            40          40         0          1\n# ℹ 4,086 more rows\n# ℹ 2 more variables: combined <dbl>, group <chr>"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home_Ex03",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if the relevant packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, tidyverse, tidytext, ggforce, visNetwork, graphlayouts)\n\n\nMC3 <- fromJSON(\"data/MC3.json\")\n\n\nMC3_edges <- as_tibble(MC3$links) %>%\n  distinct() %>%\n  mutate(source = as.character(source),\n         target = as.character(target),\n         type = as.character(type)) %>%\n  group_by(source, target, type) %>%\n  summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\n\nMC3_nodes <- as_tibble(MC3$nodes) %>%\n  #distinct() %>%\n  mutate(country = as.character(country),\n         id = as.character(id),\n         product_services = as.character(product_services),\n         revenue_omu = as.numeric(as.character(revenue_omu)),\n         type = as.character(type)) %>%\n  select(id, country, type, revenue_omu, product_services)\n\n\ntidy_nodes <- MC3_nodes %>%\n  unnest_tokens(word, product_services, to_lower = TRUE, strip_punct = TRUE)\n\n\ntidy_stopwords <- tidy_nodes %>%\n  anti_join(stop_words)"
  }
]